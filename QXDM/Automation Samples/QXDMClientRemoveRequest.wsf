<job id="QXDM ClientRemoveRequest Example">
<script language="JScript" src="HelperFunctions.js" />
<script language="JScript">

// NOTE: This script must be run from CScript in a command box,
// i.e. CScript QXDMClientRemoveRequest.wsf <COM Port Number>

// This script demostrates usage of the QXDM2 automation
// interface method ClientRemoveRequest

// Global variables
var QXDM;
var QXDM2;

// COM port to be used for communication with the phone by QXDM
var PortNumber = "";

// Process the argument - port number
function ParseArguments()
{
   // Assume failure
   var RC = false;
   var Txt = "";
   var Help = "Syntax: CScript QXDMClientRemoveRequest.wsf <COM Port Number>\n" 
            + "Eg:     CScript QXDMClientRemoveRequest.wsf 5\n";

   // Grab the shell
   var SH = new ActiveXObject( "WScript.Shell" );
   if (SH == null)
   {
      Txt = "Unable to interact with Windows shell";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   var Args = WScript.Arguments;
   if (Args.length < 1)
   {
      WScript.StdOut.WriteLine( Help );

      return RC;
   }

   PortNumber = WScript.Arguments( 0 );
   if (PortNumber < 1 || PortNumber > 100)
   {
      Txt = "Invalid port number\n\n";
      WScript.StdOut.WriteLine( Txt + Help );

      return RC;
   }

   // Success
   RC = true;
   return RC;
}

// Initialize application
function Initialize()
{
   // Assume failure
   var RC = false;
   var Txt = "";

   // Create QXDM object
   QXDM = new ActiveXObject( "QXDM.Application" );
   if (QXDM == null)
   {
      Txt = "Error launching QXDM";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   // Create QXDM2 interface
   QXDM2 = QXDM.GetIQXDM2();
   if (QXDM2 == null)
   {
      Txt = "QXDM does not support required interface";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   SetQXDM( QXDM );
   SetQXDM2( QXDM2 );

   // Success
   RC = true;
   return RC;
}

// Schedule and remove request
function ManipulateRequests()
{
   var Txt = "";

   // Create a client
   var Handle = QXDM2.RegisterQueueClient( 256 );
   if (Handle == 0xFFFFFFFF)
   {
      Txt = "Unable to create client";
      WScript.StdOut.WriteLine( Txt );

      return;
   }

   // Schedule a repetitive version number request with 1s timeout, 
   // the request will be sent out every 500 ms until it is removed
   var RequestName = "Version Number Request";
   var ReqID = QXDM2.ClientRequestItem( Handle,
                                        RequestName,
                                        "",
                                        true,
                                        1000,
                                        0xFFFFFFFF,
                                        500 );

   if (ReqID == 0)
   {
      Txt = "Unable to schedule request - \'" + RequestName + "\'";
      WScript.StdOut.WriteLine( Txt );

      QXDM2.UnregisterClient( Handle );
      return;
   }

   Txt = "Request \'" + RequestName + "\' scheduled by QXDM (ID " + ReqID + ")";
   WScript.StdOut.WriteLine( Txt );

   // Wait for the request to go out a number of times
   WScript.Sleep( 5000 );
 
   // Now remove it
   var RC = QXDM2.ClientRemoveRequest( Handle, ReqID );
   if (RC == false)
   {
      Txt = "Failed to remove request ID " + ReqID;
      WScript.StdOut.WriteLine( Txt );
      
      QXDM2.UnregisterClient( Handle );
      return;
   }

   Txt = "Successfully removed request ID " + ReqID;
   WScript.StdOut.WriteLine( Txt );

   QXDM2.UnregisterClient( Handle );
}

// Main body of script
function Execute()
{
   // Parse out arguments
   var RC = ParseArguments();
   if (RC == false)
   {
      return;
   }

   // Launch QXDM
   RC = Initialize();
   if (RC == false)
   {
      return;
   }

   // Get QXDM version
   var Version = QXDM.AppVersion;
   var Txt = "QXDM Version: " + Version;
   WScript.StdOut.WriteLine( Txt );

   // Connect to our desired port
   RC = Connect( PortNumber );
   if (RC == false)
   {
      return;
   }

   // Schedule and remove request
   ManipulateRequests();

   // Disconnect phone
   Disconnect();
}

Execute();

</script>
</job>