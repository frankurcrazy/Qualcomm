<job id="QXDM UnregisterClient Example">
<script language="JScript" src="HelperFunctions.js" />
<script language="JScript">

// NOTE: This script must be run from CScript in a command box,
// i.e. CScript QXDMUnregisterClient.wsf <COM Port Number>

// This script demostrates usage of the IQXDM2 automation
// interface method UnregisterClient()

// Global variables
var QXDM;
var QXDM2;

// COM port to be used for communication with the phone by QXDM
var PortNumber = "";

// Process the argument - port number
function ParseArguments()
{
   // Assume failure
   var RC = false;
   var Txt = "";
   var Help = "Syntax: CScript QXDMUnregisterClient.wsf <COM Port Number>\n" 
            + "Eg:     CScript QXDMUnregisterClient.wsf 5\n";

   // Grab the shell
   var SH = new ActiveXObject( "WScript.Shell" );
   if (SH == null)
   {
      Txt = "Unable to interact with Windows shell";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   var Args = WScript.Arguments;
   if (Args.length < 1)
   {
      WScript.StdOut.WriteLine( Help );

      return RC;
   }

   PortNumber = WScript.Arguments( 0 );
   if (PortNumber < 1 || PortNumber > 100)
   {
      Txt = "Invalid port number\n\n";
      WScript.StdOut.WriteLine( Txt + Help );

      return RC;
   }

   // Success
   RC = true;
   return RC;
}

// Initialize application
function Initialize()
{
   // Assume failure
   var RC = false;
   var Txt = "";

   // Create QXDM object
   QXDM = new ActiveXObject( "QXDM.Application" );
   if (QXDM == null)
   {
      Txt = "Error launching QXDM";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   // Create QXDM2 interface
   QXDM2 = QXDM.GetIQXDM2();
   if (QXDM2 == null)
   {
      Txt = "QXDM does not support required interface";
      WScript.StdOut.WriteLine( Txt );

      return RC;
   }

   SetQXDM( QXDM );
   SetQXDM2( QXDM2 );

   // Success
   RC = true;
   return RC;
}

// Schedule requests to be sent
function ScheduleRequests()
{
   // Assume failure
   var RC = false;
   var Txt = "";

   // Create a client
   var Handle = QXDM2.RegisterQueueClient( 256 );
   if (Handle == 0xFFFFFFFF)
   {
      Txt = "Unable to create client";
      WScript.StdOut.WriteLine( Txt );

      return;
   }

   Txt = "Client registered successfully";
   WScript.StdOut.WriteLine( Txt );

   // Schedule version number request with 1000 ms timeout
   var RequestName = "Version Number Request";
   var ReqID = QXDM2.ClientRequestItem( Handle,
                                        RequestName,
                                        "",
                                        true,
                                        1000,
                                        1,
                                        1 );
   if (ReqID == 0)
   {
      Txt = "Unable to schedule request - \'" + RequestName + "\'";
      WScript.StdOut.WriteLine( Txt );

      QXDM2.UnregisterClient( Handle );

      return;
   }

   Txt = "\'" + RequestName + "\' scheduled by QXDM";
   WScript.StdOut.WriteLine( Txt );

   // Wait for the response
   WScript.sleep( 2000 );

   // Get number of items in client
   var ItemCount = QXDM2.GetClientItemCount( Handle );
   if (ItemCount == 0)
   {
      Txt = "Error getting client item count";
      WScript.StdOut.WriteLine( Txt );

      return;
   }

   Txt = "Number of items in client view is " + ItemCount;
   WScript.StdOut.WriteLine( Txt );

   RC = QXDM2.UnregisterClient( Handle );
   if (RC == false)
   {
      Txt = "UnregisterClient failed";
      WScript.StdOut.WriteLine( Txt );
   }
}

// Main body of script
function Execute()
{
   // Parse out arguments
   var RC = ParseArguments();
   if (RC == false)
   {
      return;
   }

   // Launch QXDM
   RC = Initialize();
   if (RC == false)
   {
      return;
   }

   // Get QXDM version
   var Version = QXDM.AppVersion;
   var Txt = "QXDM Version: " + Version;
   WScript.StdOut.WriteLine( Txt );

   // Connect to our desired port
   RC = Connect( PortNumber );
   if (RC == false)
   {
      return;
   }

   // Schedule requests using "ClientRequestItem"
   ScheduleRequests();

   // Disconnect phone
   Disconnect();
}

Execute();

</script>
</job>